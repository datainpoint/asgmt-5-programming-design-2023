import unittest
import importlib

class TestAssignmentFive(unittest.TestCase):
    def test_01_SquareSqrtArgs(self):
        square_sqrt_args = asgmt.SquareSqrtArgs()
        self.assertEqual(square_sqrt_args.square_args(0, 1, 2), [0, 1, 4])
        self.assertEqual(square_sqrt_args.sqrt_args(0, 1, 4), [0.0, 1.0, 2.0])
        self.assertEqual(square_sqrt_args.square_args(3, 4, 5), [9, 16, 25])
        self.assertEqual(square_sqrt_args.sqrt_args(9, 16, 25), [3.0, 4.0, 5.0])
    def test_02_Gryffindor(self):
        harry_potter = asgmt.Gryffindor("Harry Potter")
        self.assertEqual(harry_potter.name, 'Harry Potter')
        self.assertEqual(harry_potter.traits, ['courage', 'bravery', 'nerve', 'chivalry'])
        self.assertEqual(harry_potter.colors, ['scarlet red', 'gold'])
        self.assertEqual(harry_potter.cast_a_spell(), 'Expelliarmus!')
        hermione_granger = asgmt.Gryffindor("Hermione Granger")
        self.assertEqual(hermione_granger.name, 'Hermione Granger')
        self.assertEqual(hermione_granger.traits, ['courage', 'bravery', 'nerve', 'chivalry'])
        self.assertEqual(hermione_granger.colors, ['scarlet red', 'gold'])
        self.assertEqual(hermione_granger.cast_a_spell(), 'Expelliarmus!')
    def test_03_Palindrome(self):
        palindrome = asgmt.Palindrome('eye')
        self.assertEqual(palindrome.original_text, 'eye')
        self.assertEqual(palindrome.reversed_text, 'eye')
        self.assertTrue(palindrome.is_palindrome())
        palindrome = asgmt.Palindrome('dye')
        self.assertEqual(palindrome.original_text, 'dye')
        self.assertEqual(palindrome.reversed_text, 'eyd')
        self.assertFalse(palindrome.is_palindrome())
    def test_04_MinMaxFinder(self):
        min_max_finder = asgmt.MinMaxFinder([2, 3, 5, 7, 11, 11, 7, 5, 3, 2])
        self.assertIsInstance(min_max_finder.integer_list, list)
        self.assertEqual(min_max_finder.find_min(), 2)
        self.assertEqual(min_max_finder.find_max(), 11)
        self.assertEqual(min_max_finder.find_idxmin(), [0, 9])
        self.assertEqual(min_max_finder.find_idxmax(), [4, 5])
        min_max_finder = asgmt.MinMaxFinder([10, 9, 8, 6, 4, 1, 1, 4, 6, 8, 9, 10])
        self.assertIsInstance(min_max_finder.integer_list, list)
        self.assertEqual(min_max_finder.find_min(), 1)
        self.assertEqual(min_max_finder.find_max(), 10)
        self.assertEqual(min_max_finder.find_idxmin(), [5, 6])
        self.assertEqual(min_max_finder.find_idxmax(), [0, 11])
    def test_05_CommonDivisors(self):
        cd = asgmt.CommonDivisors(3, 6)
        self.assertEqual(len(cd.x_divisors), 2)
        self.assertEqual(len(cd.y_divisors), 4)
        self.assertEqual(len(cd.get_common_divisors()), 2)
        cd = asgmt.CommonDivisors(4, 8)
        self.assertEqual(len(cd.x_divisors), 3)
        self.assertEqual(len(cd.y_divisors), 4)
        self.assertEqual(len(cd.get_common_divisors()), 3)
    def test_06_PrimeJudger(self):
        pj = asgmt.PrimeJudger(1)
        self.assertEqual(len(pj.get_divisors()), 1)
        self.assertFalse(pj.is_prime())
        pj = asgmt.PrimeJudger(2)
        self.assertEqual(len(pj.get_divisors()), 2)
        self.assertTrue(pj.is_prime())
        pj = asgmt.PrimeJudger(4)
        self.assertEqual(len(pj.get_divisors()), 3)
        self.assertFalse(pj.is_prime())
    def test_07_import_zip_codes_json(self):
        zip_codes_json = asgmt.import_zip_codes_json()
        self.assertIsInstance(zip_codes_json, list)
        self.assertEqual(len(zip_codes_json), 378)
    def test_08_lookup_zip_codes(self):
        self.assertEqual(asgmt.lookup_zip_codes("臺北市", "中正區"), '100')
        self.assertEqual(asgmt.lookup_zip_codes("基隆市", "中正區"), '202')
        self.assertEqual(asgmt.lookup_zip_codes("臺北市", "中山區"), '104')
        self.assertEqual(asgmt.lookup_zip_codes("基隆市", "中山區"), '203')
        self.assertEqual(asgmt.lookup_zip_codes("臺北市", "大安區"), '106')
        self.assertEqual(asgmt.lookup_zip_codes("臺中市", "大安區"), '439')
        self.assertEqual(asgmt.lookup_zip_codes("臺北市", "內湖區"), '114')
    def test_09_import_countries_json(self):
        countries_json = asgmt.import_countries_json()
        self.assertIsInstance(countries_json, list)
        self.assertEqual(len(countries_json), 249)
    def test_10_lookup_country_iso_codes(self):
        self.assertEqual(asgmt.lookup_country_iso_codes("Taiwan"), ('TW', 'TWN'))
        self.assertEqual(asgmt.lookup_country_iso_codes("Japan"), ('JP', 'JPN'))
        self.assertEqual(asgmt.lookup_country_iso_codes("Lithuania"),  ('LT', 'LTU'))
        self.assertEqual(asgmt.lookup_country_iso_codes("Slovenia"), ('SI', 'SVN'))
        self.assertEqual(asgmt.lookup_country_iso_codes("Czechia"),  ('CZ', 'CZE'))
        self.assertEqual(asgmt.lookup_country_iso_codes("United States of America (the)"), ('US', 'USA'))

asgmt = importlib.import_module("asgmt-five")
suite = unittest.TestLoader().loadTestsFromTestCase(TestAssignmentFive)
runner = unittest.TextTestRunner(verbosity=2)
test_results = runner.run(suite)
number_of_failures = len(test_results.failures)
number_of_errors = len(test_results.errors)
number_of_test_runs = test_results.testsRun
number_of_successes = number_of_test_runs - (number_of_failures + number_of_errors)
print("You've got {} successes among {} questions.".format(number_of_successes, number_of_test_runs))